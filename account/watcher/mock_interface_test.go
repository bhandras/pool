// Code generated by MockGen. DO NOT EDIT.
// Source: account/watcher/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=account/watcher/interfaces.go -package=watcher -destination=account/watcher/mock_interface_test.go
//

// Package watcher is a generated GoMock package.
package watcher

import (
	reflect "reflect"

	btcec "github.com/btcsuite/btcd/btcec/v2"
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	wire "github.com/btcsuite/btcd/wire"
	chainntnfs "github.com/lightningnetwork/lnd/chainntnfs"
	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// CancelAccountConf mocks base method.
func (m *MockController) CancelAccountConf(traderKey *btcec.PublicKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelAccountConf", traderKey)
}

// CancelAccountConf indicates an expected call of CancelAccountConf.
func (mr *MockControllerMockRecorder) CancelAccountConf(traderKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAccountConf", reflect.TypeOf((*MockController)(nil).CancelAccountConf), traderKey)
}

// CancelAccountSpend mocks base method.
func (m *MockController) CancelAccountSpend(traderKey *btcec.PublicKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelAccountSpend", traderKey)
}

// CancelAccountSpend indicates an expected call of CancelAccountSpend.
func (mr *MockControllerMockRecorder) CancelAccountSpend(traderKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAccountSpend", reflect.TypeOf((*MockController)(nil).CancelAccountSpend), traderKey)
}

// Start mocks base method.
func (m *MockController) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockControllerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockController)(nil).Start))
}

// Stop mocks base method.
func (m *MockController) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockControllerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockController)(nil).Stop))
}

// WatchAccountConf mocks base method.
func (m *MockController) WatchAccountConf(traderKey *btcec.PublicKey, txHash chainhash.Hash, script []byte, numConfs, heightHint uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAccountConf", traderKey, txHash, script, numConfs, heightHint)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchAccountConf indicates an expected call of WatchAccountConf.
func (mr *MockControllerMockRecorder) WatchAccountConf(traderKey, txHash, script, numConfs, heightHint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAccountConf", reflect.TypeOf((*MockController)(nil).WatchAccountConf), traderKey, txHash, script, numConfs, heightHint)
}

// WatchAccountExpiration mocks base method.
func (m *MockController) WatchAccountExpiration(traderKey *btcec.PublicKey, expiry uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WatchAccountExpiration", traderKey, expiry)
}

// WatchAccountExpiration indicates an expected call of WatchAccountExpiration.
func (mr *MockControllerMockRecorder) WatchAccountExpiration(traderKey, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAccountExpiration", reflect.TypeOf((*MockController)(nil).WatchAccountExpiration), traderKey, expiry)
}

// WatchAccountSpend mocks base method.
func (m *MockController) WatchAccountSpend(traderKey *btcec.PublicKey, accountPoint wire.OutPoint, script []byte, heightHint uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAccountSpend", traderKey, accountPoint, script, heightHint)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchAccountSpend indicates an expected call of WatchAccountSpend.
func (mr *MockControllerMockRecorder) WatchAccountSpend(traderKey, accountPoint, script, heightHint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAccountSpend", reflect.TypeOf((*MockController)(nil).WatchAccountSpend), traderKey, accountPoint, script, heightHint)
}

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// HandleAccountConf mocks base method.
func (m *MockEventHandler) HandleAccountConf(arg0 *btcec.PublicKey, arg1 *chainntnfs.TxConfirmation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAccountConf", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAccountConf indicates an expected call of HandleAccountConf.
func (mr *MockEventHandlerMockRecorder) HandleAccountConf(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAccountConf", reflect.TypeOf((*MockEventHandler)(nil).HandleAccountConf), arg0, arg1)
}

// HandleAccountExpiry mocks base method.
func (m *MockEventHandler) HandleAccountExpiry(arg0 *btcec.PublicKey, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAccountExpiry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAccountExpiry indicates an expected call of HandleAccountExpiry.
func (mr *MockEventHandlerMockRecorder) HandleAccountExpiry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAccountExpiry", reflect.TypeOf((*MockEventHandler)(nil).HandleAccountExpiry), arg0, arg1)
}

// HandleAccountSpend mocks base method.
func (m *MockEventHandler) HandleAccountSpend(arg0 *btcec.PublicKey, arg1 *chainntnfs.SpendDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAccountSpend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAccountSpend indicates an expected call of HandleAccountSpend.
func (mr *MockEventHandlerMockRecorder) HandleAccountSpend(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAccountSpend", reflect.TypeOf((*MockEventHandler)(nil).HandleAccountSpend), arg0, arg1)
}

// MockExpiryWatcher is a mock of ExpiryWatcher interface.
type MockExpiryWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockExpiryWatcherMockRecorder
}

// MockExpiryWatcherMockRecorder is the mock recorder for MockExpiryWatcher.
type MockExpiryWatcherMockRecorder struct {
	mock *MockExpiryWatcher
}

// NewMockExpiryWatcher creates a new mock instance.
func NewMockExpiryWatcher(ctrl *gomock.Controller) *MockExpiryWatcher {
	mock := &MockExpiryWatcher{ctrl: ctrl}
	mock.recorder = &MockExpiryWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpiryWatcher) EXPECT() *MockExpiryWatcherMockRecorder {
	return m.recorder
}

// AddAccountExpiration mocks base method.
func (m *MockExpiryWatcher) AddAccountExpiration(traderKey *btcec.PublicKey, expiry uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAccountExpiration", traderKey, expiry)
}

// AddAccountExpiration indicates an expected call of AddAccountExpiration.
func (mr *MockExpiryWatcherMockRecorder) AddAccountExpiration(traderKey, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountExpiration", reflect.TypeOf((*MockExpiryWatcher)(nil).AddAccountExpiration), traderKey, expiry)
}

// NewBlock mocks base method.
func (m *MockExpiryWatcher) NewBlock(bestHeight uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewBlock", bestHeight)
}

// NewBlock indicates an expected call of NewBlock.
func (mr *MockExpiryWatcherMockRecorder) NewBlock(bestHeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlock", reflect.TypeOf((*MockExpiryWatcher)(nil).NewBlock), bestHeight)
}
